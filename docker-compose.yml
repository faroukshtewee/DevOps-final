services:
  db:
    container_name: mysql-container
    image: mysql:8.0
    restart: always
#    command: mysqld --default-authentication-plugin=mysql_native_password --skip-grant-tables
    command: mysqld --default-authentication-plugin=mysql_native_password
    volumes:
      - ./mysql:/var/lib/mysql
    env_file:
      - .env
    environment:
      - MYSQL_ROOT_PASSWORD=${SQL_ROOT_PASSWORD}
      - MYSQL_USER=${SQL_USER}
      - MYSQL_PASSWORD=${SQL_PASSWORD}
      - MYSQL_DATABASE=${SQL_DATABASE}
    ports:
      - 3306:3306
    healthcheck:
#      test: ["CMD-SHELL", "exit | mysql -h localhost -P 3306 -u root -p$$MYSQL_ROOT_PASSWORD" ]
      test: ["CMD-SHELL", "mysqladmin -h 127.0.0.1 -P 3306 -u root -p$$MYSQL_ROOT_PASSWORD ping"]
      interval: 5s
      timeout: 20s
      retries: 30

  init:
      container_name: mysql-init
      build:
        context: init
      volumes:
#        - /tmp/shared:/usr/lib/shared
         - ./shared:/usr/lib/shared
      env_file:
        - .env
      environment:
        - SQL_ROOT_PASSWORD=${SQL_ROOT_PASSWORD}
      depends_on:
        db:
          condition: service_healthy

  djangoproj:
    container_name: django-GymNest-container
    build:
      context: ./GymNestProject
    restart: always
    env_file:
      - .env
    environment:
      - SQL_ROOT_PASSWORD=${SQL_ROOT_PASSWORD}
      - SQL_USER=${SQL_USER}
      - SQL_PASSWORD=${SQL_PASSWORD}
      - SQL_DATABASE=${SQL_DATABASE}
      - SQL_HOST=${SQL_HOST}
      - SQL_ENGINE=${SQL_ENGINE}
      - SQL_PORT=${SQL_PORT}
      - AWS_PROFILE=default
    ports:
      - 8000:8000
    volumes:
      - ./image_outputs:/app/exercisesApp/Automation/image_outputs  # to save the generated image in host machine not in container
      - ~/.aws:/root/.aws
    depends_on:
      db:
        condition: service_healthy
  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    restart: unless-stopped
    privileged: true
    user: root
    ports:
      - "8080:8080"   # Jenkins Web UI
      - "50000:50000" # Jenkins agent connection
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock # To allow Docker to run inside Jenkins container
      - ./jenkins/init.groovy:/usr/share/jenkins/ref/init.groovy.d/init.groovy
    environment:
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false
      -  JENKINS_ADMIN_ID=admin
      - JENKINS_ADMIN_PASSWORD=password
    networks:
      - jenkins_network

volumes:
  jenkins_home:

networks:
  jenkins_network:
    driver: bridge

